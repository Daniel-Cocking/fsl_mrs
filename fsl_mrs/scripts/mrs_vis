#!/usr/bin/env python

# mrs_vis - quick MRS visualisation
#
# Author: Saad Jbabdi <saad@fmrib.ox.ac.uk>
#         William Clarke <william.clarke@ndcn.ox.ac.uk>
#
# Copyright (C) 2019 University of Oxford
# SHBASECOPYRIGHT

import argparse


def main():
    p = argparse.ArgumentParser(
                   description='FSL Magnetic Resonance Spectroscopy Tools')
    p.add_argument('file', type=str, metavar='FILE or DIR',
                   help='NIfTI file or directory of basis sets')
    p.add_argument('--ppmlim', default=(.2, 4.2), type=float,
                   nargs=2, metavar=('LOW', 'HIGH'),
                   help='limit the fit to a freq range (default=(.2,4.2))')
    p.add_argument('--mask', default=None, type=str, help='Mask for MRSI')
    p.add_argument('--save', default=None, type=str, help='Save fig to path')

    args = p.parse_args()

    from fsl_mrs.utils.plotting import plot_spectrum, FID2Spec, plot_spectra
    from fsl_mrs.utils.mrs_io import read_FID, read_basis
    import matplotlib.pyplot as plt
    from fsl_mrs.core import MRS, MRSI
    import numpy as np
    from fsl_mrs.utils.preproc.combine import combine_FIDs
    import nibabel as nib
    from pathlib import Path

    # Some logic to figure out what we are dealing with
    p = Path(args.file)
    nifti_files = list(p.glob('*.nii*'))

    # Identify BASIS
    if p.is_dir() and len(nifti_files) == 0 or \
       p.suffix.upper() == '.BASIS':

        basis, names, basishdr = read_basis(args.file)
        fid = np.zeros(basis.shape[0])

        mrs = MRS(FID=fid,
                  header=basishdr[0],
                  basis=basis,
                  names=names,
                  basis_hdr=basishdr[0])

        mrs.check_Basis(repair=True)
        first, last = mrs.ppmlim_to_range(ppmlim=args.ppmlim)
        plt.figure(figsize=(8, 8))
        for idx, n in enumerate(names):
            plt.plot(mrs.getAxes(ppmlim=args.ppmlim),
                     np.real(FID2Spec(mrs.basis[:, idx]))[first:last],
                     label=n)

        plt.gca().invert_xaxis()
        plt.xlabel('Chemical shift (ppm)')
        plt.legend()
        if args.save is not None:
            plt.savefig(args.save)
        else:
            plt.show()

    # Identify directory of nifti files
    elif p.is_dir() and len(nifti_files) > 0:
        mrs_obj = []
        conj = 0
        for f in p.glob('*.nii*'):
            fid, header = read_FID(str(f), squeezeSVS=False)
            if np.prod(fid.shape[:3]) > 1:
                raise ValueError("Can't handle directory of CSI files."
                                 "Pass as individual file.")

            fid = np.squeeze(fid)
            if fid.ndim == 1:
                mrs = MRS(FID=fid, header=header)
                conj += mrs.check_FID(repair=True)
                mrs_obj.append(mrs)
            else:
                mrs_list = []
                tmp_conj = 0
                for ff in fid.T:
                    tmpmrs = MRS(FID=ff, header=header)
                    tmp_conj += tmpmrs.check_FID(repair=True)
                    mrs_list.append(tmpmrs)
                conj += tmp_conj/len(mrs_list)
                fidList = [m.FID for m in mrs_list]
                combfid = combine_FIDs(fidList, 'svd', do_prewhiten=True)
                mrs_obj.append(MRS(FID=combfid, header=header))

        fig = plot_spectra(mrs_obj,
                           ppmlim=args.ppmlim)

        if args.save is not None:
            fig.savefig(args.save)
        else:
            plt.show()

        if conj/len(mrs_obj) > 0.5:
            print('Spectra were conjugated. '
                  'Run "fsl_proc conj" on the data.')

    # Plain nifti file
    elif p.is_file():
        fid, header = read_FID(args.file, squeezeSVS=False)
        if np.prod(fid.shape[:3]) == 1:
            # SVS
            conj = 0
            fid = np.squeeze(fid)
            if fid.ndim == 1:
                mrs = MRS(FID=fid, header=header)
                conj = mrs.check_FID(repair=True)
                fig = plot_spectrum(mrs, ppmlim=args.ppmlim)
                if args.save is not None:
                    fig.savefig(args.save)
                else:
                    plt.show()
            else:
                mrs_list = []
                tmp_conj = 0
                for f in fid.T:
                    tmpmrs = MRS(FID=f, header=header)
                    tmp_conj += tmpmrs.check_FID(repair=True)
                    mrs_list.append(tmpmrs)
                conj += tmp_conj/len(mrs_list)
                fidList = [m.FID for m in mrs_list]
                combfid = combine_FIDs(fidList, 'svd', do_prewhiten=True)
                single_mrs = MRS(FID=combfid, header=header)
                fig = plot_spectra(mrs_list,
                                   ppmlim=args.ppmlim,
                                   single_FID=single_mrs)
                if args.save is not None:
                    fig.savefig(args.save)
                else:
                    plt.show()

            if conj > 0.5:
                print('Spectra were conjugated. '
                      'Run "fsl_proc conj" on the data.')

        else:
            if args.mask is not None:
                mask_hdr = nib.load(args.mask)
                mask = np.asanyarray(mask_hdr.dataobj)
                if mask.ndim == 2:
                    mask = np.expand_dims(mask, 2)
            mrsi = MRSI(fid, header, mask=mask)

            mrsi.plot()


if __name__ == '__main__':
    main()
