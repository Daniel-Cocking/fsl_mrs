#!/usr/bin/env python

# mrs_vis - quick MRS visualisation
#
# Author: Saad Jbabdi <saad@fmrib.ox.ac.uk>
#         William Clarke <william.clarke@ndcn.ox.ac.uk>
#
# Copyright (C) 2019 University of Oxford
# SHBASECOPYRIGHT

import argparse


def main():
    p = argparse.ArgumentParser(description='FSL Magnetic Resonance Spectroscopy Tools')
    p.add_argument('file', type=str, metavar='FILE or DIR',
                   help='NIfTI file or directory of basis sets')
    p.add_argument('--ppmlim', default=(.2, 4.2), type=float,
                   nargs=2, metavar=('LOW', 'HIGH'),
                   help='limit the fit to a freq range (default=(.2,4.2))')
    p.add_argument('--mask', default=None, type=str, help='Mask for MRSI')
    p.add_argument('--save', default=None, type=str, help='Save fig to path')
    p.add_argument('--display_dim', default=None, type=str,
                   help='NIFTI-MRS tag. Do not average across this dimension.')

    args = p.parse_args()

    from fsl_mrs.utils.plotting import plot_spectrum, FID2Spec, plot_spectra
    from fsl_mrs.utils.mrs_io import read_FID, read_basis
    import matplotlib.pyplot as plt
    from fsl_mrs.core import MRS
    import numpy as np
    from fsl_mrs.utils.preproc import nifti_mrs_proc
    import nibabel as nib
    from pathlib import Path

    # Some logic to figure out what we are dealing with
    p = Path(args.file)
    nifti_files = list(p.glob('*.nii*'))

    # Identify BASIS
    if p.is_dir() and len(nifti_files) == 0 or \
       p.suffix.upper() == '.BASIS':

        basis, names, basishdr = read_basis(args.file)
        fid = np.zeros(basis.shape[0])

        mrs = MRS(FID=fid,
                  header=basishdr[0],
                  basis=basis,
                  names=names,
                  basis_hdr=basishdr[0])

        mrs.check_Basis(repair=True)
        first, last = mrs.ppmlim_to_range(ppmlim=args.ppmlim)
        plt.figure(figsize=(8, 8))
        for idx, n in enumerate(names):
            plt.plot(mrs.getAxes(ppmlim=args.ppmlim),
                     np.real(FID2Spec(mrs.basis[:, idx]))[first:last],
                     label=n)

        plt.gca().invert_xaxis()
        plt.xlabel('Chemical shift (ppm)')
        plt.legend()
        if args.save is not None:
            plt.savefig(args.save)
        else:
            plt.show()

    # Identify directory of nifti files
    elif p.is_dir() and len(nifti_files) > 0:
        raise ValueError('mrs_vis should be called on a single'
                         ' NIFTI-MRS file, not a directory (unless'
                         ' it contains basis files).')

    # Single nifti file
    elif p.is_file():
        data = read_FID(args.file)
        if data.ndim > 4 and 'DIM_COIL' in data.dim_tags:
            print('Performing coil combination')
            data = nifti_mrs_proc.coilcombine(data)

        if np.prod(data.shape[:3]) == 1:
            # SVS
            if args.display_dim:
                for idx in range(data.ndim - 4):
                    if data.dim_tags[idx] != args.display_dim:
                        print(f'Averaging {data.dim_tags[idx]}')
                        data = nifti_mrs_proc.average(data, data.dim_tags[idx])

                fig = plot_spectra(data.mrs(), ppmlim=args.ppmlim)
            else:
                while data.ndim > 4:
                    print(f'Averaging {data.dim_tags[0]}')
                    data = nifti_mrs_proc.average(data, data.dim_tags[0])
                fig = plot_spectrum(data.mrs(), ppmlim=args.ppmlim)
            if args.save is not None:
                fig.savefig(args.save)
            else:
                plt.show()

        else:
            while data.ndim > 4:
                print(f'Averaging {data.dim_tags[0]}')
                data = nifti_mrs_proc.average(data, data.dim_tags[0])

            mrsi = data.mrs()
            if args.mask is not None:
                mask_hdr = nib.load(args.mask)
                mask = np.asanyarray(mask_hdr.dataobj)
                if mask.ndim == 2:
                    mask = np.expand_dims(mask, 2)
                mrsi.set_mask(mask)
            mrsi.plot()


if __name__ == '__main__':
    main()
