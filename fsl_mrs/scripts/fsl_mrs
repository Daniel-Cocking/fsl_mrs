#!/usr/bin/env python

# fsl_mrs - wrapper script for MRS fitting
#
# Author: Saad Jbabdi <saad@fmrib.ox.ac.uk>
#
# Copyright (C) 2019 University of Oxford 
# SHBASECOPYRIGHT


import argparse
import time, os, sys, shutil, warnings
import numpy as np
from fsl_mrs import MRS
from fsl_mrs.utils import mrs_io
from fsl_mrs.utils import report
import datetime


# TODO:
# Look here: http://blog.vwelch.com/2011/04/combining-configparser-and-argparse.html
# For a good way to allow config files


def main():
    # Parse command-line arguments
    p = argparse.ArgumentParser(description='FSL Magnetic Resonance Spectroscopy Tool')

    
    required = p.add_argument_group('required arguments')
    fitting_args = p.add_argument_group('fitting options')
    optional = p.add_argument_group('additional options')

    # REQUIRED ARGUMENTS
    required.add_argument('-d','--data',
                          required=True,type=str,metavar='<str>.RAW',
                          help='input FID file')
    required.add_argument('-b','--basis',
                          required=True,type=str,metavar='<str>',
                          help='.BASIS file or folder containing basis spectra (will read all .RAW files within)')
    required.add_argument('-o','--output',
                          required=True,type=str,metavar='<str>',
                          help='output folder')
    
    # FITTING ARGUMENTS
    fitting_args.add_argument('--model',default='LCModel',type=str,
                              help='model [default=LCModel]')
    fitting_args.add_argument('--algo',default='Newton',type=str,
                   help='algorithm [Newton or Powell or MH]')
    fitting_args.add_argument('--ignore',type=str,nargs='+',metavar='METAB',
                   help='ignore certain metabolites [repeatable]')
    fitting_args.add_argument('--combine',type=str,nargs='+',action='append',metavar='METAB',
                   help='combine certain metabolites')
    fitting_args.add_argument('--ppmlim',default=None,type=float,nargs=2,metavar=('LOW','HIGH'),
                   help='limit the fit to a freq range')
    fitting_args.add_argument('--h2o',type=str,metavar='H2O',
                   help='input .H2O file for quantification')
    fitting_args.add_argument('--T2s',type=float,nargs=4,metavar=('T2metab','T2GM','T2WM','T2CSF'),
                   help='T2 values (in milliseconds) for metabolites, and water GM, WM, and CSF (default=3T ref values)')
    fitting_args.add_argument('--volfrac',type=float,nargs=3,metavar=('GM','WM','CSF'),
                   help='volume fractions of GM, WM, and CSF (in most cases these should add up to one)')

    
    # ADDITONAL OPTIONAL ARGUMENTS
    optional.add_argument('--report',action="store_true",
                   help='output html report')
    optional.add_argument('--verbose',action="store_true",
                   help='spit out verbose info')
    optional.add_argument('--overwrite',action="store_true",
                   help='overwrite existing output folder')

  

    # Output kickass splash screen
    mrs_io.splash(logo='mrs')

    # Parse command-line arguments
    args = p.parse_args()
    

    # Check if output folder exists
    overwrite = args.overwrite
    if os.path.exists(args.output):
        if not overwrite:
            print("Folder '{}' exists. Are you sure you want to delete it? [Y,N]".format(args.output))
            response = input()
            overwrite = response.upper() == "Y"
        if not overwrite:
            print('Early stopping...')
            exit()
        else:
            shutil.rmtree(args.output)
            os.mkdir(args.output)
    else:
        os.mkdir(args.output)

    
    #######  Do the work #######

    # Instantiate MRS object
    mrs = MRS()

    if args.verbose:        
        print('--->> Read input data and basis\n')
        print('  {}\n'.format(args.data))
        print('  {}\n'.format(args.basis))

    # Read data and Basis
    mrs.read_data(args.data)
    if os.path.isdir(args.basis):
        mrs.read_basis_from_folder(args.basis)
    else:
        mrs.read_basis_from_file(args.basis)

    # Read H2O file if provided
    if args.h2o is not None:
        if args.verbose:
            print('---> Read h2o file {}\n'.format(args.h2o))
        mrs.read_h2o(args.h2o)

    # Check that H2O quantif can include T2 factor
    if mrs.echotime is None:
        warnings.warn('\n Cannot determine echo time. Will assume it is =30ms!!!!\n')
        mrs.echotime = 30

    if args.T2s is None:
        T2s = np.asarray([160,110,80,2000])
        warnings.warn('\n T2s not provided. Assuming 3T approx values\n')
    else:
        T2s = args.T2s
        
        
    # Ignore/Combine metabolites
    mrs.ignore(args.ignore)
    mrs.combine(args.combine)

             

    # Do the fitting here
    if args.verbose:
        print('--->> Start fitting\n\n')
        print('    Model = [{}] and Algorithm = [{}]\n'.format(args.model,args.algo))
        start = time.time()


    # BASELINE REMOVAL
    # Remove baseline before fitting
    #print('     --- Remove baseline --- ')
    #B = mrs.calc_baseline(ppmlim=(0.2,4.4),order=10)
    #mrs.Spec = mrs.Spec - B
    #mrs.FID  = np.fft.ifft(mrs.Spec)
  # ENDOF BASELINE REMOVAL
        
    # Do the fitting
    print('     --- Run fitting --- ')
    ppmlim=args.ppmlim
    if ppmlim is not None:
        ppmlim=(ppmlim[0],ppmlim[1])
    print('mrs.fit(model ={}, method={},ppmlim={})'.format(args.model,args.algo,ppmlim))
   
    mrs.fit(model = args.model, method=args.algo,ppmlim=args.ppmlim)
    stop = time.time()

    # Do some extra bits for quantification
    mrs.post_process(metab=['Cr','PCr'],scale=8.0,T2s=T2s,volfrac=args.volfrac)
    mrs.reference_matebolite = 'Cr+PCr'
    print(mrs.all_con_names_h2o)
    
    # Report on the fitting
    if args.verbose:
        print('    Fitting lasted          : {:.3f} secs.\n'.format(stop-start))
        #print('    Fitted concentrations   : {}\n'.format(mrs.concentrations))
    # Save output files
    if args.verbose:
        print('--->> Saving output files to {}\n'.format(args.output))

    mrs.save_results_to_file(os.path.join(args.output,'results_table.csv'))
    mrs.save_fit_to_figure(os.path.join(args.output,'spectrum_fit.jpg'))


    
    if args.report:
        if args.verbose:
            print('--->> Creating html report\n')
        mrs.fidfile      = args.data
        mrs.basisfile    = args.basis
        mrs.h2ofile      = args.h2o
        mrs.outdir       = args.output
        mrs.provenance   = 'FMRIB Centre'
        mrs.date         = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
        report_file      = os.path.join(args.output,'report.html')

        r = report.MRS_Report(mrs)
        r.parse(report_file)

        if args.verbose:
            print('      {}'.format(report_file)) 

    # Finish
    # TMP: quick plot
    #for proj in ['real','imag','abs']:
    #    mrs.plot_fit(out=os.path.join(args.output,'fitted_spectrum_{}.png'.format(proj)),proj=proj)

     
    if args.verbose:
        print('\n\n\nDone.')

        
if __name__ == '__main__':
    main()
